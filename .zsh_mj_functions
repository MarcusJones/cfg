# COLORS autoload colors
if [[ "$terminfo[colors]" -gt 8 ]]; then
    colors
fi
for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
    eval $COLOR='$fg_no_bold[${(L)COLOR}]'
    eval BOLD_$COLOR='$fg_bold[${(L)COLOR}]'
done
eval RESET='$reset_color'


### FUNCTIONS #################################################
echo ${BOLD_RED}"*** FUNCTIONS ***"
echo -n ${RED}
function hello() {
   echo "Hello, $1!"
}


condainstall() {
	REQ_FILE=$1
	while read req; do 
		echo "Requirement: $req" 
		echo "conda install --yes $req"
		conda install --yes $req
	done <$REQ_FILE
}
echo "Added function condainstall(requirements.txt)"


condarem() {
# Iterate over the list of environment names
# Conda remove them without prompting
	for var in "$@"
	do
		echo "Force removing environment $var"
		conda-env remove --y --n "$var"
	done
}
echo "Added function condarem(<list env names>)"


clonethis() {
    # Given a github repo name (target, reponame)
    # Clone it to the DIR
	TARGET=$1
	THIS_REPO=$2

	if [ "$TARGET" = "ocn" ]
	then
		ORGANIZATION="oceanprotocol"
		THIS_DIR="ocn"
	elif [ "$TARGET" = "mj" ]
	then
		ORGANIZATION="MarcusJones"
		THIS_DIR="git"
	else
		exit 1
	fi

	echo "Cloning repo $ORGANIZATION/$THIS_REPO into $THIS_DIR"
	git clone https://github.com/$ORGANIZATION/$THIS_REPO.git ~/$THIS_DIR/$THIS_REPO
	# pip install --upgrade --force-reinstall git+https://github.com/$THIS_ORG/$THIS_REPO.git@$THIS_BRANCH
}

echo "Added function clonethis(org, repo, target_dir)"

dockerclean() {
	docker rmi -f $(docker images -q) # Remove all images
	docker rm $(docker ps -a -q) # Remove all 
	docker system prune -a
}

echo "Added function dockerclean()"

startwebk8s() {
	kubectl proxy &
	echo ${BOLD_GREEN}
	aws-iam-authenticator token -i test-eks-dev | jq -r '.status.token'
	echo ${RESET}
	sensible-browser http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
}

echo "Added function startwebk8s()"

install_branch() {
    # Given a github path (organization, repo, branch)
    # pip install the repo
	THIS_ORG=$1
	THIS_REPO=$2
	THIS_BRANCH=$3
	echo "Full command:" pip install --upgrade --force-reinstall git+https://github.com/$THIS_ORG/$THIS_REPO.git@$THIS_BRANCH
	echo 
	echo "Force-installing package from $THIS_BRANCH branch of $THIS_ORG/$THIS_REPO"
	echo
	pip install --upgrade --force-reinstall git+https://github.com/$THIS_ORG/$THIS_REPO.git@$THIS_BRANCH
}

echo "Added function install_branch(organization, repo, branch)"

startocean() {
	echo Offloading the Ocean Barge ...
	export AQUARIUS_VERSION=v0.3.8
	export BRIZO_VERSION="NOT RUNNING"
	export KEEPER_VERSION=v0.10.3

	echo "AQUARIUS $AQUARIUS_VERSION, BRIZO $BRIZO_VERSION, KEEPER $KEEPER_VERSION"
	
	# bash -x ~/ocn/start_ocean.sh --local-spree-node --no-pleuston
	#~/ocn/barge/start_ocean.sh --local-spree-node --no-pleuston
	#bash -x ~/ocn/barge/start_ocean.sh --latest --no-brizo --no-pleuston --local-spree-node
	bash -x ~/ocn/barge/start_ocean.sh --no-brizo --no-pleuston --local-spree-node

}

startoceanlocalnode() {
	echo Offloading the Ocean Barge ...
	export AQUARIUS_VERSION=v0.2.2
	export BRIZO_VERSION=v0.3.3
	export KEEPER_VERSION=v0.9.1

	echo "AQUARIUS $AQUARIUS_VERSION, BRIZO $BRIZO_VERSION, KEEPER $KEEPER_VERSION"
	
	# bash -x ~/ocn/start_ocean.sh --local-spree-node --no-pleuston
	~/ocn/barge/start_ocean.sh --local-nile-node --no-pleuston --no-brizo --no-aquarius

}

userocean() {
	sudo chown -R $USER ~/.ocean
}


echo "Added function startocean()"

speed_test() {
	watch -n 60 "speedtest-cli | egrep 'Download:|Upload:'" 
}

scan_address() {
	h
}

startairflow() {
	source activate airflow
	airflow scheduler & airflow webserver & 
	sensible-browser http://0.0.0.0:8080
}

check_brizo_logs() {
	kubectl logs my-ocean-stack-helm-ocean-brizo-7dc985c94c-r8x7g -f  
}

monitor_ec2() {
export AWS_DEFAULT_PROFILE=$1
echo Monitoring instances for user $AWS_DEFAULT_PROFILE
while sleep 5; do 
  clear; 
  aws ec2 describe-instances --query "Reservations[*].Instances[*].{name: Tags[?Key=='Name'] | [0].Value, instance_id: InstanceId, ip_address: PrivateIpAddress, state: State.Name}" --output table; 
done   
}
